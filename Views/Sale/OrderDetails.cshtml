@model WebApplication1.Models.Order
@{
	Layout = null;
	ViewData["Title"] = "Order Details #" + Model.OrderId;
	var statuses = new Dictionary<string, string>
	{
		{ "Pending", "bg-warning" },
		{ "Processing", "bg-info" },
		{ "Shipped", "bg-primary" },
		{ "Completed", "bg-success" },
		{ "Cancelled", "bg-danger" }
	};
}
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - WebApplication1</title>
	<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
	<link rel="stylesheet" href="~/css/orderdetails.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/WebApplication1.styles.css" asp-append-version="true" />

</head>
@section Styles {
	<link rel="stylesheet" href="~/css/sale-dashboard.css" />
	<style>
		.order-detail-header {
			background-color: white;
			border-radius: 6px;
			padding: 15px;
			margin-bottom: 15px;
			box-shadow: 0 2px 5px rgba(0,0,0,0.05);
		}

		.detail-card {
			background-color: white;
			border-radius: 6px;
			margin-bottom: 15px;
			box-shadow: 0 2px 5px rgba(0,0,0,0.05);
			overflow: hidden;
		}

		.detail-card-header {
			padding: 12px 15px;
			border-bottom: 1px solid #eee;
			font-weight: 600;
		}

		.detail-card-body {
			padding: 15px;
		}

		.customer-info .item {
			margin-bottom: 8px;
		}

			.customer-info .item .label {
				font-weight: 500;
				color: #6c757d;
			}

			.customer-info .item .value {
				font-weight: 500;
			}

		.timeline {
			position: relative;
			padding-left: 40px;
		}

			.timeline:before {
				content: '';
				position: absolute;
				left: 10px;
				top: 0;
				height: 100%;
				width: 2px;
				background-color: #e0e0e0;
			}

		.timeline-item {
			position: relative;
			margin-bottom: 20px;
		}

			.timeline-item:last-child {
				margin-bottom: 0;
			}

		.timeline-marker {
			position: absolute;
			left: -30px;
			top: 0;
			height: 20px;
			width: 20px;
			border-radius: 50%;
			background-color: white;
			border: 2px solid #3a7bd5;
			z-index: 1;
		}

		.timeline-date {
			font-size: 0.85rem;
			color: #6c757d;
			margin-bottom: 5px;
		}

		.timeline-content {
			background-color: #f8f9fa;
			padding: 10px 15px;
			border-radius: 4px;
		}

		.timeline-title {
			font-weight: 500;
			margin-bottom: 5px;
			display: flex;
			justify-content: space-between;
		}

		.product-image img {
			max-width: 60px;
			max-height: 60px;
			object-fit: cover;
			border-radius: 4px;
		}

		.product-info {
			display: flex;
			flex-direction: column;
		}

		.product-name {
			font-weight: 500;
		}

		.product-variant {
			font-size: 0.85rem;
			color: #6c757d;
		}
	</style>
}

<div class="content-header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-sm-6">
				<h1>Order Details <small class="text-muted">#@Model.OrderId</small></h1>
			</div>
			<div class="col-sm-6">
				<ol class="breadcrumb float-sm-right">
					<li class="breadcrumb-item" style="background: cyan;border-radius: 10px;padding: 6px;margin-left: 10px;font-weight: 900;"><a href="/">Home</a></li>
					<li class="breadcrumb-item" style="background: cyan;border-radius: 10px;padding: 6px;margin-left: 10px;font-weight: 900;"><a href="/Sale/Dashboard">Dashboard</a></li>
					<li class="breadcrumb-item" style="background: cyan;border-radius: 10px;padding: 6px;margin-left: 10px;font-weight: 900;"><a href="/Sale/Orders">Orders</a></li>
					<li class="breadcrumb-item active">Order #@Model.OrderId</li>
				</ol>
			</div>
		</div>
	</div>
</div>

<section class="content">
	<div class="container-fluid">
		<!-- Success message if any -->
		@if (TempData["SuccessMessage"] != null)
		{
			<div class="alert alert-success alert-dismissible fade show" role="alert">
				@TempData["SuccessMessage"]
				<button type="button" class="close" data-dismiss="alert">
					<span>&times;</span>
				</button>
			</div>
		}

		<!-- Error message if any -->
		@if (TempData["ErrorMessage"] != null)
		{
			<div class="alert alert-danger alert-dismissible fade show" role="alert">
				@TempData["ErrorMessage"]
				<button type="button" class="close" data-dismiss="alert">
					<span>&times;</span>
				</button>
			</div>
		}

		<div class="order-detail-header">
			<div class="row">
				<div class="col-md-6">
					<div class="d-flex align-items-center">
						<h4 class="mb-0 mr-3">Order #@Model.OrderId</h4>
						<span class="badge @(statuses.ContainsKey(Model.Status) ? statuses[Model.Status] : "bg-secondary")">
							@(Model.Status ?? "N/A")
						</span>
					</div>
					<p class="text-muted mb-0">
						Order placed on @Model.OrderDate?.ToString("dd MMMM yyyy, HH:mm")
					</p>
				</div>
				<div class="col-md-6">
					<!-- Thêm form cập nhật trạng thái trực tiếp -->
					<form asp-action="UpdateOrderStatus" method="post" id="updateStatusForm" class="status-update-form">
						<input type="hidden" name="orderId" value="@Model.OrderId" />
						<div class="d-flex align-items-center justify-content-md-end mt-3 mt-md-0">
							<div class="mr-2 status-select-container">
								<label for="statusSelect" class="mr-2">Update status:</label>
								<select id="statusSelect" name="status" class="form-control form-control-sm">
									@if (Model.Status == "Pending")
									{
										<!-- Nếu trạng thái đơn hàng là Pending, chỉ hiển thị Processing và Cancel -->
										<option value="Pending" selected>Pending</option>
										<option value="Processing">Processing</option>
										<option value="Cancelled">Cancelled</option>
									}
									else if (Model.Status == "Processing")
									{
										<!-- Nếu trạng thái đơn hàng là Processing, chỉ hiển thị Shipped -->
										<option value="Processing" selected>Processing</option>
										<option value="Shipped">Shipped</option>
									}
									else if (Model.Status == "Shipped")
									{
										<!-- Nếu trạng thái đơn hàng là Shipped, chỉ hiển thị Completed -->
										<option value="Shipped" selected>Shipped</option>
										<option value="Completed">Completed</option>
									}
									else if (Model.Status == "Completed")
									{
										<!-- Nếu trạng thái đơn hàng đã Completed, không cho phép thay đổi -->
										<option value="Completed" selected>Completed</option>
									}
									else if (Model.Status == "Cancelled")
									{
										<!-- Nếu trạng thái đơn hàng đã Cancelled, không cho phép thay đổi -->
										<option value="Cancelled" selected>Cancelled</option>
									}
									else
									{
										<!-- Trạng thái mặc định hoặc không xác định -->
										<option value="" selected>-- Select Status --</option>
										<option value="Pending">Pending</option>
										<option value="Processing">Processing</option>
										<option value="Shipped">Shipped</option>
										<option value="Completed">Completed</option>
										<option value="Cancelled">Cancelled</option>
									}
								</select>
							</div>
							<button type="submit" class="btn btn-primary" style="margin-right:10px">Update</button>
							<div class="btn-group ml-2">
								<button type="button" class="btn btn-info" onclick="window.print()">
									<i class="fas fa-print mr-1"></i> Print
								</button>
								<a href="/Sale/Orders" class="btn btn-secondary">
									<i class="fas fa-arrow-left mr-1"></i> Back
								</a>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>

		<div class="row">
			<!-- Left Column - Customer & Payment Info -->
			<div class="col-md-4">
				<!-- Customer Info -->
				<div class="detail-card">
					<div class="detail-card-header">
						<i class="fas fa-user mr-2"></i> Customer Information
					</div>
					<div class="detail-card-body">
						<div class="customer-info">
							<div class="item">
								<div class="label">Name</div>
								<div class="value">@(Model.User?.FullName ?? "Guest Customer")</div>
							</div>
							<div class="item">
								<div class="label">Phone</div>
								<div class="value">@Model.PhoneContact</div>
							</div>
							<div class="item">
								<div class="label">Email</div>
								<div class="value">@(Model.User?.Email ?? "Not provided")</div>
							</div>
							<div class="item">
								<div class="label">Shipping Address</div>
								<div class="value">@Model.ShippingAddress</div>
							</div>
						</div>
					</div>
				</div>

				<!-- Payment Info -->
				<div class="detail-card">
					<div class="detail-card-header">
						<i class="fas fa-credit-card mr-2"></i> Payment Information
					</div>
					<div class="detail-card-body">
						@if (Model.Payment != null)
						{
							<div class="customer-info">
								<div class="item">
									<div class="label">Payment Method</div>
									<div class="value">@Model.Payment.PaymentMethod</div>
								</div>
								<div class="item">
									<div class="label">Status</div>
									<div class="value">
										<span class="badge @(Model.Payment.PaymentStatus == "Completed" ? "bg-success" : "bg-warning")">
											@Model.Payment.PaymentStatus
										</span>
									</div>
								</div>
								<div class="item">
									<div class="label">Transaction ID</div>
									<div class="value">@(Model.Payment.TransactionId ?? "N/A")</div>
								</div>
								<div class="item">
									<div class="label">Payment Date</div>
									<div class="value">@(Model.Payment.PaymentDate?.ToString("dd MMM yyyy, HH:mm") ?? "Not recorded")</div>
								</div>
								<div class="item">
									<div class="label">Amount</div>
									<div class="value font-weight-bold">@Model.Payment.Amount.ToString("C")</div>
								</div>
							</div>
						}
						else
						{
							<div class="text-center py-3">
								<i class="fas fa-exclamation-circle text-warning mb-3" style="font-size: 2rem;"></i>
								<h6>No payment information</h6>
								<p class="text-muted mb-0">This order doesn't have payment details.</p>
							</div>
						}
					</div>
				</div>

				<!-- Order Notes -->
				<div class="detail-card">
					<div class="detail-card-header">
						<i class="fas fa-sticky-note mr-2"></i> Order Notes
					</div>
					<div class="detail-card-body">
						@if (!string.IsNullOrEmpty(Model.Notes))
						{
							<p class="mb-0">@Model.Notes</p>
						}
						else
						{
							<p class="text-muted mb-0">No notes for this order.</p>
						}
					</div>
				</div>
			</div>

			<!-- Right Column - Order Items & Status History -->
			<div class="col-md-8">
				<!-- Order Items -->
				<div class="detail-card">
					<div class="detail-card-header">
						<i class="fas fa-shopping-cart mr-2"></i> Order Items
					</div>
					<div class="detail-card-body p-0">
						<div class="table-responsive">
							<table class="table table-hover mb-0">
								<thead>
									<tr>
										<th>Product</th>
										<th>Price</th>
										<th class="text-center">Quantity</th>
										<th class="text-right">Total</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var item in Model.OrderDetails)
									{
										<tr>
											<td>
												<div class="d-flex">
													<div class="product-image mr-3">
														<img src="@(item.Variant?.Image ?? "/img/no-image.png")" alt="Product" />
													</div>
													<div class="product-info">
														<div class="product-name">@item.Variant?.Product?.ProductName</div>
														<div class="product-variant">
															@item.Variant?.Size?.SizeName /
															@item.Variant?.Color?.ColorName
															@if (item.Variant?.Material != null)
															{
																<span>/ @item.Variant.Material.MaterialName</span>
															}
														</div>
														<div class="product-sku text-muted">SKU: @(item.Variant?.Sku ?? "N/A")</div>
													</div>
												</div>
											</td>
											<td>@item.UnitPrice.ToString("C")</td>
											<td class="text-center">@item.Quantity</td>
											<td class="text-right font-weight-bold">@((item.UnitPrice * item.Quantity).ToString("C"))</td>
										</tr>
									}
								</tbody>
								<tfoot>
									<tr>
										<td colspan="3" class="text-right">Subtotal:</td>
										<td class="text-right">@(Model.OrderDetails.Sum(od => od.UnitPrice * od.Quantity).ToString("C"))</td>
									</tr>
									<tr>
										<td colspan="3" class="text-right">Shipping:</td>
										<td class="text-right">@((Model.TotalAmount - Model.OrderDetails.Sum(od => od.UnitPrice * od.Quantity)).ToString("C"))</td>
									</tr>
									<tr>
										<td colspan="3" class="text-right font-weight-bold">Total:</td>
										<td class="text-right font-weight-bold">@Model.TotalAmount.ToString("C")</td>
									</tr>
								</tfoot>
							</table>
						</div>
					</div>
				</div>

				<!-- Order Status History -->
				<div class="detail-card">
					<div class="detail-card-header">
						<i class="fas fa-history mr-2"></i> Order Status History
					</div>
					<div class="detail-card-body">
						<div class="timeline">
							@if (Model.OrderStatusHistories != null && Model.OrderStatusHistories.Any())
							{
								foreach (var history in Model.OrderStatusHistories.OrderByDescending(h => h.UpdatedAt))
								{
									<div class="timeline-item">
										<div class="timeline-marker"></div>
										<div class="timeline-date">
											@(history.UpdatedAt?.ToString("dd MMM yyyy, HH:mm") ?? "Unknown date")
										</div>
										<div class="timeline-content">
											<div class="timeline-title">
												<span>
													Status changed to
													<span class="badge @(statuses.ContainsKey(history.Status) ? statuses[history.Status] : "bg-secondary")">
														@history.Status
													</span>
												</span>
												<small>by @(history.UpdatedByNavigation?.FullName ?? "System")</small>
											</div>
											@if (!string.IsNullOrEmpty(history.Notes))
											{
												<div class="timeline-body">@history.Notes</div>
											}
										</div>
									</div>
								}
							}
							else
							{
								<div class="text-center py-3">
									<i class="fas fa-exclamation-circle text-warning mb-3" style="font-size: 2rem;"></i>
									<h6>No status history</h6>
									<p class="text-muted mb-0">This order doesn't have any status history records.</p>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>



@section Scripts {
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
	<script>

		// Tự động đóng alert sau 5 giây
		document.addEventListener('DOMContentLoaded', function() {
			console.log('Script loaded');

			// Tự động đóng alert sau 5 giây
			setTimeout(function() {
				var alerts = document.querySelectorAll('.alert');
				alerts.forEach(function(alert) {
					if (alert.querySelector('.close')) {
						alert.querySelector('.close').click();
					}
				});
			}, 5000);

			// Lấy tham chiếu đến select element
			var statusSelect = document.getElementById('statusSelect');
			console.log('Status select element:', statusSelect);

			if (statusSelect) {
				// Lưu giá trị ban đầu
				var originalValue = statusSelect.value;
				console.log('Original value:', originalValue);

				// Thêm event listener cho sự kiện change
				statusSelect.addEventListener('change', function() {
					console.log('Status changed');
					var newStatus = this.options[this.selectedIndex].text;
					var newValue = this.value;

					console.log('New status:', newStatus);

					if (confirm('Bạn có chắc chắn muốn cập nhật trạng thái đơn hàng thành "' + newStatus + '"?')) {
						console.log('Confirmed, submitting form');

						// Thêm loading overlay
						document.body.insertAdjacentHTML(
							'beforeend',
							'<div class="loading-overlay"><div class="spinner-border text-primary"></div></div>'
						);

						// Submit form
						document.getElementById('updateStatusForm').submit();
					} else {
						console.log('Cancelled, resetting to original value');
						this.value = originalValue;
					}
				});
			} else {
				console.error('Status select element not found!');
			}
		});
	</script>
}